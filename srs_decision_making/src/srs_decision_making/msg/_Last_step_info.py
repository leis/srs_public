"""autogenerated by genmsg_py from Last_step_info.msg. Do not edit."""
import roslib.message
import struct


class Last_step_info(roslib.message.Message):
  _md5sum = "d3e1336fdd2e5ea9111bd37f49150507"
  _type = "srs_decision_making/Last_step_info"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string step_name
string outcome
bool semi_autonomous_mode
"""
  __slots__ = ['step_name','outcome','semi_autonomous_mode']
  _slot_types = ['string','string','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       step_name,outcome,semi_autonomous_mode
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Last_step_info, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.step_name is None:
        self.step_name = ''
      if self.outcome is None:
        self.outcome = ''
      if self.semi_autonomous_mode is None:
        self.semi_autonomous_mode = False
    else:
      self.step_name = ''
      self.outcome = ''
      self.semi_autonomous_mode = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.step_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.outcome
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.semi_autonomous_mode))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.step_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.outcome = str[start:end]
      start = end
      end += 1
      (self.semi_autonomous_mode,) = _struct_B.unpack(str[start:end])
      self.semi_autonomous_mode = bool(self.semi_autonomous_mode)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.step_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.outcome
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.semi_autonomous_mode))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.step_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.outcome = str[start:end]
      start = end
      end += 1
      (self.semi_autonomous_mode,) = _struct_B.unpack(str[start:end])
      self.semi_autonomous_mode = bool(self.semi_autonomous_mode)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
