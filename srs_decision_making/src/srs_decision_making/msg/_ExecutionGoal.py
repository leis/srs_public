"""autogenerated by genmsg_py from ExecutionGoal.msg. Do not edit."""
import roslib.message
import struct


class ExecutionGoal(roslib.message.Message):
  _md5sum = "17ace6d839845ba28d596f5bde7e89f1"
  _type = "srs_decision_making/ExecutionGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#define the goal, srs_msgs/srs_action[] action_sequence	#Specify what action sequence to be applied
string action         # to deprecate, replaced by json_parameters. Kept for backward compatibility
string parameter      # to deprecate, replaced by json_parameters
uint32 priority       # to deprecate
string json_parameters   # new added parameter in json (test by Ze)
# string[] parameters   # to deprecate

"""
  __slots__ = ['action','parameter','priority','json_parameters']
  _slot_types = ['string','string','uint32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       action,parameter,priority,json_parameters
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ExecutionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action is None:
        self.action = ''
      if self.parameter is None:
        self.parameter = ''
      if self.priority is None:
        self.priority = 0
      if self.json_parameters is None:
        self.json_parameters = ''
    else:
      self.action = ''
      self.parameter = ''
      self.priority = 0
      self.json_parameters = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.action
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.parameter
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.priority))
      _x = self.json_parameters
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.parameter = str[start:end]
      start = end
      end += 4
      (self.priority,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.json_parameters = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.action
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.parameter
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.priority))
      _x = self.json_parameters
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.parameter = str[start:end]
      start = end
      end += 4
      (self.priority,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.json_parameters = str[start:end]
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
