/* Auto-generated by genmsg_cpp for file /home/lei/git/care-o-bot/srs_public/srs_decision_making/srv/errors.srv */
#ifndef SRS_DECISION_MAKING_SERVICE_ERRORS_H
#define SRS_DECISION_MAKING_SERVICE_ERRORS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace srs_decision_making
{
template <class ContainerAllocator>
struct errorsRequest_ {
  typedef errorsRequest_<ContainerAllocator> Type;

  errorsRequest_()
  : current_state()
  , exceptional_case_id(0)
  {
  }

  errorsRequest_(const ContainerAllocator& _alloc)
  : current_state(_alloc)
  , exceptional_case_id(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  current_state;

  typedef uint32_t _exceptional_case_id_type;
  uint32_t exceptional_case_id;


private:
  static const char* __s_getDataType_() { return "srs_decision_making/errorsRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "3adfe20095676e4d7878a3f8c937482e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "ccaba201faaec4cd64bde7d7b8be1d57"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string current_state\n\
uint32 exceptional_case_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, current_state);
    ros::serialization::serialize(stream, exceptional_case_id);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, current_state);
    ros::serialization::deserialize(stream, exceptional_case_id);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(current_state);
    size += ros::serialization::serializationLength(exceptional_case_id);
    return size;
  }

  typedef boost::shared_ptr< ::srs_decision_making::errorsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_decision_making::errorsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct errorsRequest
typedef  ::srs_decision_making::errorsRequest_<std::allocator<void> > errorsRequest;

typedef boost::shared_ptr< ::srs_decision_making::errorsRequest> errorsRequestPtr;
typedef boost::shared_ptr< ::srs_decision_making::errorsRequest const> errorsRequestConstPtr;


template <class ContainerAllocator>
struct errorsResponse_ {
  typedef errorsResponse_<ContainerAllocator> Type;

  errorsResponse_()
  : solution()
  , giveup(0)
  {
  }

  errorsResponse_(const ContainerAllocator& _alloc)
  : solution(_alloc)
  , giveup(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _solution_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  solution;

  typedef uint8_t _giveup_type;
  uint8_t giveup;


private:
  static const char* __s_getDataType_() { return "srs_decision_making/errorsResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "fa5a5c759e5a76f793f9be2d90d0b67a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "ccaba201faaec4cd64bde7d7b8be1d57"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string solution\n\
uint8 giveup\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, solution);
    ros::serialization::serialize(stream, giveup);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, solution);
    ros::serialization::deserialize(stream, giveup);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(solution);
    size += ros::serialization::serializationLength(giveup);
    return size;
  }

  typedef boost::shared_ptr< ::srs_decision_making::errorsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_decision_making::errorsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct errorsResponse
typedef  ::srs_decision_making::errorsResponse_<std::allocator<void> > errorsResponse;

typedef boost::shared_ptr< ::srs_decision_making::errorsResponse> errorsResponsePtr;
typedef boost::shared_ptr< ::srs_decision_making::errorsResponse const> errorsResponseConstPtr;

struct errors
{

typedef errorsRequest Request;
typedef errorsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct errors
} // namespace srs_decision_making

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_decision_making::errorsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_decision_making::errorsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_decision_making::errorsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3adfe20095676e4d7878a3f8c937482e";
  }

  static const char* value(const  ::srs_decision_making::errorsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3adfe20095676e4dULL;
  static const uint64_t static_value2 = 0x7878a3f8c937482eULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_decision_making::errorsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_decision_making/errorsRequest";
  }

  static const char* value(const  ::srs_decision_making::errorsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_decision_making::errorsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string current_state\n\
uint32 exceptional_case_id\n\
\n\
";
  }

  static const char* value(const  ::srs_decision_making::errorsRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_decision_making::errorsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_decision_making::errorsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_decision_making::errorsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fa5a5c759e5a76f793f9be2d90d0b67a";
  }

  static const char* value(const  ::srs_decision_making::errorsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfa5a5c759e5a76f7ULL;
  static const uint64_t static_value2 = 0x93f9be2d90d0b67aULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_decision_making::errorsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_decision_making/errorsResponse";
  }

  static const char* value(const  ::srs_decision_making::errorsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_decision_making::errorsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string solution\n\
uint8 giveup\n\
\n\
";
  }

  static const char* value(const  ::srs_decision_making::errorsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_decision_making::errorsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.current_state);
    stream.next(m.exceptional_case_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct errorsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_decision_making::errorsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.solution);
    stream.next(m.giveup);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct errorsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<srs_decision_making::errors> {
  static const char* value() 
  {
    return "ccaba201faaec4cd64bde7d7b8be1d57";
  }

  static const char* value(const srs_decision_making::errors&) { return value(); } 
};

template<>
struct DataType<srs_decision_making::errors> {
  static const char* value() 
  {
    return "srs_decision_making/errors";
  }

  static const char* value(const srs_decision_making::errors&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<srs_decision_making::errorsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ccaba201faaec4cd64bde7d7b8be1d57";
  }

  static const char* value(const srs_decision_making::errorsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<srs_decision_making::errorsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_decision_making/errors";
  }

  static const char* value(const srs_decision_making::errorsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<srs_decision_making::errorsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ccaba201faaec4cd64bde7d7b8be1d57";
  }

  static const char* value(const srs_decision_making::errorsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<srs_decision_making::errorsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_decision_making/errors";
  }

  static const char* value(const srs_decision_making::errorsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SRS_DECISION_MAKING_SERVICE_ERRORS_H

