/* Auto-generated by genmsg_cpp for file /home/lei/git/care-o-bot/srs_public/srs_decision_making/msg/ExecutionFeedback.msg */
#ifndef SRS_DECISION_MAKING_MESSAGE_EXECUTIONFEEDBACK_H
#define SRS_DECISION_MAKING_MESSAGE_EXECUTIONFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace srs_decision_making
{
template <class ContainerAllocator>
struct ExecutionFeedback_ {
  typedef ExecutionFeedback_<ContainerAllocator> Type;

  ExecutionFeedback_()
  : current_state()
  , solution_required(false)
  , exceptional_case_id(0)
  , json_feedback()
  {
  }

  ExecutionFeedback_(const ContainerAllocator& _alloc)
  : current_state(_alloc)
  , solution_required(false)
  , exceptional_case_id(0)
  , json_feedback(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  current_state;

  typedef uint8_t _solution_required_type;
  uint8_t solution_required;

  typedef uint32_t _exceptional_case_id_type;
  uint32_t exceptional_case_id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _json_feedback_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  json_feedback;


private:
  static const char* __s_getDataType_() { return "srs_decision_making/ExecutionFeedback"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0e36b97f48749b0648782cf298eb80be"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#define a feedback message\n\
string current_state         # to deprecate\n\
bool solution_required       # to deprecate\n\
uint32 exceptional_case_id   # to deprecate\n\
string json_feedback         # new added feedback in json (test by ze)\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, current_state);
    ros::serialization::serialize(stream, solution_required);
    ros::serialization::serialize(stream, exceptional_case_id);
    ros::serialization::serialize(stream, json_feedback);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, current_state);
    ros::serialization::deserialize(stream, solution_required);
    ros::serialization::deserialize(stream, exceptional_case_id);
    ros::serialization::deserialize(stream, json_feedback);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(current_state);
    size += ros::serialization::serializationLength(solution_required);
    size += ros::serialization::serializationLength(exceptional_case_id);
    size += ros::serialization::serializationLength(json_feedback);
    return size;
  }

  typedef boost::shared_ptr< ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_decision_making::ExecutionFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ExecutionFeedback
typedef  ::srs_decision_making::ExecutionFeedback_<std::allocator<void> > ExecutionFeedback;

typedef boost::shared_ptr< ::srs_decision_making::ExecutionFeedback> ExecutionFeedbackPtr;
typedef boost::shared_ptr< ::srs_decision_making::ExecutionFeedback const> ExecutionFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace srs_decision_making

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_decision_making::ExecutionFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0e36b97f48749b0648782cf298eb80be";
  }

  static const char* value(const  ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0e36b97f48749b06ULL;
  static const uint64_t static_value2 = 0x48782cf298eb80beULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_decision_making/ExecutionFeedback";
  }

  static const char* value(const  ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#define a feedback message\n\
string current_state         # to deprecate\n\
bool solution_required       # to deprecate\n\
uint32 exceptional_case_id   # to deprecate\n\
string json_feedback         # new added feedback in json (test by ze)\n\
\n\
";
  }

  static const char* value(const  ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.current_state);
    stream.next(m.solution_required);
    stream.next(m.exceptional_case_id);
    stream.next(m.json_feedback);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ExecutionFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::srs_decision_making::ExecutionFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "current_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_state);
    s << indent << "solution_required: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.solution_required);
    s << indent << "exceptional_case_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.exceptional_case_id);
    s << indent << "json_feedback: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.json_feedback);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SRS_DECISION_MAKING_MESSAGE_EXECUTIONFEEDBACK_H

