/* Auto-generated by genmsg_cpp for file /home/lei/git/care-o-bot/srs_public/srs_decision_making/msg/ExecutionGoal.msg */
#ifndef SRS_DECISION_MAKING_MESSAGE_EXECUTIONGOAL_H
#define SRS_DECISION_MAKING_MESSAGE_EXECUTIONGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace srs_decision_making
{
template <class ContainerAllocator>
struct ExecutionGoal_ {
  typedef ExecutionGoal_<ContainerAllocator> Type;

  ExecutionGoal_()
  : action()
  , parameter()
  , priority(0)
  , json_parameters()
  {
  }

  ExecutionGoal_(const ContainerAllocator& _alloc)
  : action(_alloc)
  , parameter(_alloc)
  , priority(0)
  , json_parameters(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  action;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameter_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  parameter;

  typedef uint32_t _priority_type;
  uint32_t priority;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _json_parameters_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  json_parameters;


private:
  static const char* __s_getDataType_() { return "srs_decision_making/ExecutionGoal"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "17ace6d839845ba28d596f5bde7e89f1"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#define the goal, srs_msgs/srs_action[] action_sequence	#Specify what action sequence to be applied\n\
string action         # to deprecate, replaced by json_parameters. Kept for backward compatibility\n\
string parameter      # to deprecate, replaced by json_parameters\n\
uint32 priority       # to deprecate\n\
string json_parameters   # new added parameter in json (test by Ze)\n\
# string[] parameters   # to deprecate\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, action);
    ros::serialization::serialize(stream, parameter);
    ros::serialization::serialize(stream, priority);
    ros::serialization::serialize(stream, json_parameters);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, action);
    ros::serialization::deserialize(stream, parameter);
    ros::serialization::deserialize(stream, priority);
    ros::serialization::deserialize(stream, json_parameters);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(action);
    size += ros::serialization::serializationLength(parameter);
    size += ros::serialization::serializationLength(priority);
    size += ros::serialization::serializationLength(json_parameters);
    return size;
  }

  typedef boost::shared_ptr< ::srs_decision_making::ExecutionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srs_decision_making::ExecutionGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ExecutionGoal
typedef  ::srs_decision_making::ExecutionGoal_<std::allocator<void> > ExecutionGoal;

typedef boost::shared_ptr< ::srs_decision_making::ExecutionGoal> ExecutionGoalPtr;
typedef boost::shared_ptr< ::srs_decision_making::ExecutionGoal const> ExecutionGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::srs_decision_making::ExecutionGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::srs_decision_making::ExecutionGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace srs_decision_making

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::srs_decision_making::ExecutionGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::srs_decision_making::ExecutionGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::srs_decision_making::ExecutionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "17ace6d839845ba28d596f5bde7e89f1";
  }

  static const char* value(const  ::srs_decision_making::ExecutionGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x17ace6d839845ba2ULL;
  static const uint64_t static_value2 = 0x8d596f5bde7e89f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::srs_decision_making::ExecutionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "srs_decision_making/ExecutionGoal";
  }

  static const char* value(const  ::srs_decision_making::ExecutionGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::srs_decision_making::ExecutionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#define the goal, srs_msgs/srs_action[] action_sequence	#Specify what action sequence to be applied\n\
string action         # to deprecate, replaced by json_parameters. Kept for backward compatibility\n\
string parameter      # to deprecate, replaced by json_parameters\n\
uint32 priority       # to deprecate\n\
string json_parameters   # new added parameter in json (test by Ze)\n\
# string[] parameters   # to deprecate\n\
\n\
";
  }

  static const char* value(const  ::srs_decision_making::ExecutionGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::srs_decision_making::ExecutionGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.action);
    stream.next(m.parameter);
    stream.next(m.priority);
    stream.next(m.json_parameters);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ExecutionGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srs_decision_making::ExecutionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::srs_decision_making::ExecutionGoal_<ContainerAllocator> & v) 
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "parameter: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameter);
    s << indent << "priority: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.priority);
    s << indent << "json_parameters: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.json_parameters);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SRS_DECISION_MAKING_MESSAGE_EXECUTIONGOAL_H

